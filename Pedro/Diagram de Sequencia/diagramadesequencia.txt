@startuml
actor AgenteTransito
participant SensorDeFluxo
participant ControladorSemaforo
participant CalculadorTempo
participant Semaforo
database BancoDeDados
participant Notificador

== Coleta de Dados ==
SensorDeFluxo -> ControladorSemaforo : enviarDadosFluxo(volume, via)
ControladorSemaforo -> ControladorSemaforo : validarDados()
alt Dados válidos
    ControladorSemaforo -> CalculadorTempo : calcularTempo(via, volume)
    CalculadorTempo --> ControladorSemaforo : tempoCalculado

    ControladorSemaforo -> Semaforo : aplicarTempo(tempoCalculado)
    Semaforo --> ControladorSemaforo : confirmacaoAplicacao()

    ControladorSemaforo -> BancoDeDados : salvarHistorico(via, volume, tempo)
else Dados inválidos
    ControladorSemaforo -> Notificador : notificarErro(sensor, motivo)
end

== Situação de Emergência ==
AgenteTransito -> ControladorSemaforo : ativarControleManual(comando)
ControladorSemaforo -> Semaforo : forcarEstado(comando)
ControladorSemaforo -> BancoDeDados : registrarIntervencao(agente, comando)

== Timeout ou Erro no Semáforo ==
ControladorSemaforo -> Semaforo : checarStatus()
alt Timeout/Error
    ControladorSemaforo -> Notificador : alertarFalha(semaforo)
    ControladorSemaforo -> Semaforo : aplicarModoSeguranca()
end
@enduml
